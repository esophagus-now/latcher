-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity triangle is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    out_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_V_V_TVALID : OUT STD_LOGIC;
    out_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of triangle is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "triangle,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx485tffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.506000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=389,HLS_SYN_LUT=223}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7D00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111110100000000";
    constant ap_const_lv32_BB80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011101110000000";
    constant ap_const_lv32_FFFF0600 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110000011000000000";
    constant ap_const_lv24_55556 : STD_LOGIC_VECTOR (23 downto 0) := "000001010101010101010110";
    constant ap_const_lv24_55555 : STD_LOGIC_VECTOR (23 downto 0) := "000001010101010101010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal out_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal out_V_V_1_vld_in : STD_LOGIC;
    signal out_V_V_1_vld_out : STD_LOGIC;
    signal out_V_V_1_ack_in : STD_LOGIC;
    signal out_V_V_1_ack_out : STD_LOGIC;
    signal out_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal out_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal out_V_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_V_1_sel : STD_LOGIC;
    signal out_V_V_1_load_A : STD_LOGIC;
    signal out_V_V_1_load_B : STD_LOGIC;
    signal out_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_V_1_state_cmp_full : STD_LOGIC;
    signal val_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal err : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110100010010000000";
    signal out_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_V_fu_79_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal err_new_fu_86_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_53_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_59_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_1_v_cast_cast_fu_71_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_65_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_V_1_ack_out) and (ap_const_logic_1 = out_V_V_1_vld_out))) then 
                                        out_V_V_1_sel_rd <= not(out_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_V_1_vld_in) and (ap_const_logic_1 = out_V_V_1_ack_in))) then 
                                        out_V_V_1_sel_wr <= not(out_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_V_V_1_vld_in) and (ap_const_logic_1 = out_V_V_1_ack_out) and (out_V_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = out_V_V_1_vld_in) and (out_V_V_1_state = ap_const_lv2_2)))) then 
                    out_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_V_V_1_vld_in) and (ap_const_logic_0 = out_V_V_1_ack_out) and (out_V_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = out_V_V_1_ack_out) and (out_V_V_1_state = ap_const_lv2_1)))) then 
                    out_V_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_V_V_1_vld_in) and (out_V_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = out_V_V_1_ack_out) and (out_V_V_1_state = ap_const_lv2_1)) or ((out_V_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = out_V_V_1_vld_in) and (ap_const_logic_0 = out_V_V_1_ack_out))) and not(((ap_const_logic_0 = out_V_V_1_vld_in) and (ap_const_logic_1 = out_V_V_1_ack_out)))))) then 
                    out_V_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (out_V_V_1_ack_in = ap_const_logic_1))) then
                err <= err_new_fu_86_p3;
                val_V <= tmp_V_fu_79_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_V_1_load_A)) then
                out_V_V_1_payload_A <= tmp_V_fu_79_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_V_1_load_B)) then
                out_V_V_1_payload_B <= tmp_V_fu_79_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (out_V_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (out_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (out_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    err_new_fu_86_p3 <= 
        tmp_3_fu_65_p2 when (tmp_2_fu_59_p2(0) = '1') else 
        tmp_1_fu_53_p2;
    out_V_V_1_ack_in <= out_V_V_1_state(1);
    out_V_V_1_ack_out <= out_V_V_TREADY;

    out_V_V_1_data_out_assign_proc : process(out_V_V_1_payload_A, out_V_V_1_payload_B, out_V_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_V_V_1_sel)) then 
            out_V_V_1_data_out <= out_V_V_1_payload_B;
        else 
            out_V_V_1_data_out <= out_V_V_1_payload_A;
        end if; 
    end process;

    out_V_V_1_load_A <= (out_V_V_1_state_cmp_full and not(out_V_V_1_sel_wr));
    out_V_V_1_load_B <= (out_V_V_1_sel_wr and out_V_V_1_state_cmp_full);
    out_V_V_1_sel <= out_V_V_1_sel_rd;
    out_V_V_1_state_cmp_full <= '0' when (out_V_V_1_state = ap_const_lv2_1) else '1';

    out_V_V_1_vld_in_assign_proc : process(out_V_V_1_ack_in, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (out_V_V_1_ack_in = ap_const_logic_1))) then 
            out_V_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_V_1_vld_out <= out_V_V_1_state(0);
    out_V_V_TDATA <= out_V_V_1_data_out;

    out_V_V_TDATA_blk_n_assign_proc : process(out_V_V_1_state, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_V_TDATA_blk_n <= out_V_V_1_state(1);
        else 
            out_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_TVALID <= out_V_V_1_state(0);
    tmp_1_fu_53_p2 <= std_logic_vector(unsigned(err) + unsigned(ap_const_lv32_7D00));
    tmp_2_fu_59_p2 <= "1" when (signed(tmp_1_fu_53_p2) > signed(ap_const_lv32_BB80)) else "0";
    tmp_3_fu_65_p2 <= std_logic_vector(unsigned(err) + unsigned(ap_const_lv32_FFFF0600));
    tmp_V_1_v_cast_cast_fu_71_p3 <= 
        ap_const_lv24_55556 when (tmp_2_fu_59_p2(0) = '1') else 
        ap_const_lv24_55555;
    tmp_V_fu_79_p2 <= std_logic_vector(unsigned(tmp_V_1_v_cast_cast_fu_71_p3) + unsigned(val_V));
end behav;
